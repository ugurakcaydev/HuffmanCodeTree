/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package huffmancodetree;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class HuffmanCodeTree {

    public static void charAndFreq(char[] array1, int[] array2, int n) {
        Scanner input = new Scanner(System.in);
        System.out.println();
        for (int i = 0; i < n; i++) {
            System.out.print((i + 1) + ". Harfi Giriniz = ");
            array1[i] = input.next().charAt(0);
            System.out.print((i + 1) + ". Harfin Frekansını Giriniz = ");
            array2[i] = input.nextInt();
            System.out.println();
        }
    }

    public static void printCode(HuffmanNode root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree
        if (root.left == null
                && root.right == null
                && Character.isLetter(root.c)) {
            // c is the character in the node
            System.out.println(root.c + ":" + s);
            return;
        }
        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");

    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n;
        System.out.print("Enter Array Length = ");
        n = input.nextInt();
        char[] charArray = new char[n];
        int[] charFreq = new int[n];
        charAndFreq(charArray, charFreq, n);

        PriorityQueue<HuffmanNode> q
                = new PriorityQueue<HuffmanNode>(charArray.length, new MyComparator());

        for (int i = 0; i < charArray.length; i++) {
            HuffmanNode hn = new HuffmanNode();
            hn.c = charArray[i];
            hn.data = charFreq[i];

            hn.left = null;
            hn.right = null;

            q.add(hn);
        }

        HuffmanNode root = null;

        while (q.size() > 1) {
            // first min extract.(kuyruğun en başındaki elemana ulaşma q.peek())
            HuffmanNode x = q.peek();
            q.poll();

            // second min extract.
            HuffmanNode y = q.peek();
            q.poll();

            // new node f which is equal
            HuffmanNode f = new HuffmanNode();

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';

            // first extracted node as left child.
            f.left = x;

            // second extracted node as the right child.
            f.right = y;

            // marking the f node as the root node.
            root = f;

            // add this node to the priority-queue.
            q.add(f);
        }
        // print the codes by traversing the tree
        printCode(root, "");
    }
}

class HuffmanNode {

    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

class MyComparator implements Comparator<HuffmanNode> {

    @Override
    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.data - y.data;
    }
}
